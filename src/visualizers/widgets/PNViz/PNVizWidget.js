/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Apr 26 2021 10:28:01 GMT-0400 (Eastern Daylight Time).
 */

define(['jointjs', 'css!./styles/PNVizWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'p-n-viz';
    var pn = joint.shapes.pn
    var liveTransitions = [];

    var Place = new pn.Place({
        position: { x: 140, y: 50 },
        attrs: {
            '.label': {
                'text': 'place',
                'fill': 'black'
            },
            '.root': {
                'stroke': '#9586fd',
                'stroke-width': 4
            },
            '.tokens > circle': {
                'fill': 'black'
            }
        },
        tokens: 1
    });

    var Transition = new joint.shapes.pn.Transition({
        position: { x: 50, y: 160 },
        attrs: {
            '.label': {
                'text': 'transition',
                'fill': 'black'
            },
            '.root': {
                'fill': 'black',
                'stroke': '#9586fd'
            }
        }
    });

    function PNVizWidget(logger, container) {
        this._logger = logger.fork('Widget');
        this._el = container;
        this.nodes = {};
        this._initialize();
        this._logger.debug('ctor finished');
    }

    PNVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width: width,
            height: height,
            model: this._jointSM,
            interactive: false,
            elementView: joint.shapes.pn.PlaceView.extend({
                renderTokens() {
                    try {
                        joint.shapes.pn.PlaceView.prototype.renderTokens.call(this)
                    } catch {

                    }
                }
            })
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function (elementView) {
            const currentElement = elementView.model;
            if (self._webgmeSM) {
                self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
            }
        });

        this._webgmeSM = null;
    };

    PNVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // State Machine manipulating functions called from the controller ***TAKES SM FROM CONTROL
    PNVizWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        //var pn = joint.shapes.pn;
        console.log("MACH DESC")
        self._webgmeSM = machineDescriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        self._jointSM.clear();
        const sm = self._webgmeSM;
        sm.state2id = {};
        sm.id2state = {};

        console.log("SEE PLACES THEN TRANS")
        console.log(sm.places)
        console.log(sm.transitions)
        // For each place node path
        Object.keys(sm.places).forEach(placeId => {
            //Initialized places and transitions
            let vertex = null;
            vertex = (sm.places[placeId].isTransition) ? Transition.clone() : Place.clone();
            vertex
                .position(sm.places[placeId].position.x, sm.places[placeId].position.y)
                .attr('.label/text', sm.places[placeId].name)
                //set adds values for keys not in attributes
                .set('tokens', sm.places[placeId].tokens);
            
            self._jointSM.addCell([vertex]);
            sm.places[placeId].joint = vertex   
            sm.id2state[vertex.id] = placeId;
            sm.state2id[placeId] = vertex.id;
        });

        Object.keys(sm.transitions).forEach(tran => {
            let vertex = Transition.clone()
                .attr('.label/text', sm.transitions[tran].name)
                .position(sm.transitions[tran].position.x, sm.transitions[tran].position.y);
            vertex.addTo(self._jointSM);
            sm.transitions[tran].joint = vertex;
            sm.id2state[vertex.id] = tran;
            sm.state2id[tran] = vertex.id;
        });

         // then create the links
        Object.keys(sm.places).forEach(placeId => {
            const place = sm.places[placeId];
            Object.keys(place.next).forEach(event => {
                place.jointNext = place.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: { id: place.joint.id },
                    target: { id: sm.places[place.next[event]].joint.id }
                });
                link.addTo(self._jointSM);
                place.jointNext[event] = link;
            });
        });
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    PNVizWidget.prototype.destroyMachine = function () {

    };

    //Click Driven Event = Press Play Button
    PNVizWidget.prototype.fireEvent = function (event) {
        console.log("FIRE EVENT - WIDGET")
        const self = this;
        const current = self._webgmeSM.places[self._webgmeSM.current];
        const link = current.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), { duration: 500 }, function () {
            const lastCurr = self._webgmeSM.current;
            const nextCurr = current.next[event];
            const state = self._webgmeSM;
            self._webgmeSM.current = current.next[event];
            self._passTokens(state, lastCurr, nextCurr);
            self._decorateMachine();
        });


    };
    PNVizWidget.prototype._passTokens = function (e,s,d) {
        console.log("PASS TOKENS")
        const lastnum = e.places[s].marking;
        const nextnum = e.places[d].marking;
        e.places[s].marking = lastnum - 1;
        e.places[d].marking = nextnum + 1;
        console.log(lastnum, nextnum);
        console.log(e.places[s].marking, e.places[d].marking);
    };


    PNVizWidget.prototype.resetMachine = function () {
        this._webgmeSM.current = this._webgmeSM.init;
        this._decorateMachine();
    };

    PNVizWidget.prototype._decorateMachine = function () {
        const sm = this._webgmeSM;
        console.log("Decorate Machine******")
        //console.log(this._webgmeSM.transitions["/Q/y"].joint)
        //console.log(this._jointSM.getConnectedLinks(this._webgmeSM.transitions["/Q/y"].joint), { inbound: true }    );
        Object.keys(sm.places).forEach(placeId => {
            //MAKE ALL PLACES BLACK
            sm.places[placeId].joint.attr('body/stroke', '#333333');
        });
        console.log("CURRENT NODE")
        console.log(sm.places[sm.current])
        sm.places[sm.current].joint.attr('body/fill', 'red');
        sm.places[sm.current].joint.attr('body/stroke', 'red');
        console.log("DECO - OBJ  - FOR FIREABLE EVENT")
        console.log(Object.keys(sm.places[sm.current].next)) 
        sm.setFireableEvents(Object.keys(sm.places[sm.current].next));
    };

    PNVizWidget.prototype._setCurrentState = function (newCurrent) {
        this._webgmeSM.current = newCurrent;
        this._decorateMachine();
    };


    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PNVizWidget.prototype.destroy = function () {
    };

    PNVizWidget.prototype.onActivate = function () {
        this._logger.debug('PNVizWidget has been activated');
    };  

    PNVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PNVizWidget has been deactivated');
    };

    PNVizWidget.prototype.link = function (a, b) {
            return new pn.Link({
                source: { id: a.id, selector: '.root' },
                target: { id: b.id, selector: '.root' },
                attrs: {
                    '.connection': {
                        'fill': 'none',
                        'stroke-linejoin': 'round',
                        'stroke-width': '2',
                        'stroke': '#4b4a67'
                    }
                }
            });
        }
    
    return PNVizWidget;
});