/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Apr 26 2021 10:28:01 GMT-0400 (Eastern Daylight Time).
 */

define(['jointjs', 'css!./styles/PNVizWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'p-n-viz';

    function PNVizWidget(logger, container) {
        this._logger = logger.fork('Widget');
        this._el = container;
        this.nodes = {};
        this._initialize();
        this._logger.debug('ctor finished');
    }

    PNVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width: width,
            height: height,
            model: this._jointSM,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function (elementView) {
            const currentElement = elementView.model;
            if (self._webgmeSM) {
                // console.log(self._webgmeSM.id2state[currentElement.id]);
                self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
            }
        });

        this._webgmeSM = null;
    };

    PNVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // State Machine manipulating functions called from the controller ***TAKES SM FROM CONTROL
    PNVizWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        var pn = joint.shapes.pn;
        console.log("*** WIDGET *** SM ***")
        console.log(machineDescriptor);

        self._webgmeSM = machineDescriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        console.log("init current")
        console.log(self._webgmeSM.current)
        self._jointSM.clear();
        const sm = self._webgmeSM;
        console.log("WIDGET SM 69")
        console.log(sm)
        sm.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // first add the states
        Object.keys(sm.places).forEach(placeId => {
            let vertex = null;
            //if (sm.init === placeId) {
            //    vertex = new joint.shapes.standard.Circle({
            //        position: sm.places[placeId].position,
            //        size: { width: 20, height: 20 },
            //        attrs: {
            //            body: {
            //                fill: '#333333',
            //                cursor: 'pointer'
            //            }
            //        }
            //    });
            if (sm.places[placeId].isEnd) {
                vertex = new joint.shapes.standard.Circle({
                    position: sm.places[placeId].position,
                    size: { width: 30, height: 30 },
                    attrs: {
                        body: {
                            fill: '#999999',
                            cursor: 'pointer'
                        }
                    }
                });
               //TODO - TRYING OUT TOKENS
            } else if (sm.places[placeId].isTransition) {

                vertex = new pn.Place({
                    position: sm.places[placeId].position,
                    attrs: {
                        '.label': {
                            'text': sm.places[placeId].name,
                            'fill': '#7c68fc'
                        },
                        '.root': {
                            'stroke': '#9586fd',
                            'stroke-width': 3
                        },
                        '.tokens > circle': {
                            'fill': '#7a7e9b'
                        }
                    },
                    tokens: 2
                });
            
            //} else if (sm.places[placeId].isTransition) {
            //    vertex = new joint.shapes.standard.Rectangle({
            //        position: sm.places[placeId].position,
            //        size: { width: 30, height: 30 },
            //        attrs: {
            //            label: {
            //                text: sm.places[placeId].name,
            //                //event: 'element:label:pointerdown',
            //                fontWeight: 'bold',
            //                //cursor: 'text',
            //                //style: {
            //                //    userSelect: 'text'
            //                //}
            //            },
            //            body: {
            //                strokeWidth: 3,
            //                cursor: 'pointer'
            //            }
            //        }
            //    });
            } else {
                vertex = new joint.shapes.standard.Circle({
                    position: sm.places[placeId].position,
                    size: { width: 60, height: 60 },
                    attrs: {
                        label: {
                            text: sm.places[placeId].name,
                            //event: 'element:label:pointerdown',
                            fontWeight: 'bold',
                            //cursor: 'text',
                            //style: {
                            //    userSelect: 'text'
                            //}
                        },
                        body: {
                            strokeWidth: 3,
                            cursor: 'pointer'
                        }
                    }
                });
            }
            vertex.addTo(self._jointSM);
            sm.places[placeId].joint = vertex;
            sm.id2state[vertex.id] = placeId;
        });

        // then create the links
        Object.keys(sm.places).forEach(placeId => {
            const place = sm.places[placeId];
            place.jointNext = place.jointNext || {};
            Object.keys(place.next).forEach(event => {
                const link2 = new pn.Link({
                    source: { id: place.joint.id},
                    target: { id: sm.places[place.next[event]].joint.id},
                    attrs: {
                        '.connection': {
                            'fill': 'none',
                            'stroke-linejoin': 'round',
                            'stroke-width': '2',
                            'stroke': '#4b4a67'
                        }
                    }
                });
                const link = new joint.shapes.standard.Link({
                    source: { id: place.joint.id },
                    target: { id: sm.places[place.next[event]].joint.id },
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                text: event,
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointSM);
                //link2.addTo(self._jointSM);
                console.log("LINE 172")
                console.log(place)
                console.log(place.jointNext)
                place.jointNext[event] = link;
            })
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    PNVizWidget.prototype.destroyMachine = function () {

    };

    //Click Driven Event = Press Play Button
    PNVizWidget.prototype.fireEvent = function (event) {
        console.log("FIRE EVENT")
        const self = this;
        const current = self._webgmeSM.places[self._webgmeSM.current];
        console.log(current)
        const link = current.jointNext[event];
        console.log(link)
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), { duration: 500 }, function () {
            const lastCurr = self._webgmeSM.current;
            const nextCurr = current.next[event];
            const state = self._webgmeSM;
            self._webgmeSM.current = current.next[event];
            console.log(lastCurr, nextCurr);
            console.log(self._webgmeSM);
            self._passTokens(state, lastCurr, nextCurr);
            console.log("Before deco");
            self._decorateMachine();
        });


    };
    PNVizWidget.prototype._passTokens = function (e,s,d) {
        console.log("PASS TOKENS")
        const lastnum = e.places[s].marking;
        const nextnum = e.places[d].marking;
        e.places[s].marking = lastnum - 1;
        e.places[d].marking = nextnum + 1;
        console.log(lastnum, nextnum);
        console.log(e.places[s].marking, e.places[d].marking);
    };


    PNVizWidget.prototype.resetMachine = function () {
        this._webgmeSM.current = this._webgmeSM.init;
        this._decorateMachine();
    };

    PNVizWidget.prototype._decorateMachine = function () {
        const sm = this._webgmeSM;
        Object.keys(sm.places).forEach(placeId => {
            //MAKE ALL PLACES BLACK
            sm.places[placeId].joint.attr('body/stroke', '#333333');
        });
        console.log("Decorate Machine")
        console.log(sm.current)
        console.log(sm.places[sm.current]);
        sm.places[sm.current].joint.attr('body/stroke', 'blue');
        sm.setFireableEvents(Object.keys(sm.places[sm.current].next));
    };

    PNVizWidget.prototype._setCurrentState = function (newCurrent) {
        this._webgmeSM.current = newCurrent;
        this._decorateMachine();
    };


    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PNVizWidget.prototype.destroy = function () {
    };

    PNVizWidget.prototype.onActivate = function () {
        this._logger.debug('PNVizWidget has been activated');
    };  

    PNVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PNVizWidget has been deactivated');
    };

    PNVizWidget.prototype.link = function (a, b) {
            return new pn.Link({
                source: { id: a.id, selector: '.root' },
                target: { id: b.id, selector: '.root' },
                attrs: {
                    '.connection': {
                        'fill': 'none',
                        'stroke-linejoin': 'round',
                        'stroke-width': '2',
                        'stroke': '#4b4a67'
                    }
                }
            });
        }
    
    return PNVizWidget;
});